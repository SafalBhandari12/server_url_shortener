// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  CANDIDATE
  COMPANY
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  name     String

  // Email verification
  emailVerified              Boolean   @default(false)
  verificationToken          String?   @unique
  verificationTokenExpiresAt DateTime?

  // Refresh Tokens
  refreshTokens RefreshTokens[]

  // Password reset token
  passwordResetToken          String?   @unique
  passwordResetTokenExpiresAt DateTime?

  // Defining roles
  isRoleDefined Boolean  @default(false)
  role          userRole

  shortern Shortern[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model RefreshTokens {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Candidate {
  userId   String @unique
  

  @@map("candidate")
}

model Shortern {
  id        String   @id @default(cuid())
  shortCode String   @unique
  longUrl   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  hits Int @default(0)

  userId String?
  user User? @relation(fields: [userId],references: [id])

  @@map("shortern")
}
